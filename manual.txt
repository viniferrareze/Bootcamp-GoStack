//CRIA O PACKAGE.JSON
  yarn init -y


//ADICIONA PACOTE DE DEPENDENCIAS
 * Express é o pacote inicial para rodar a aplicação node
  yarn add express -D

 * Nodemon: para sempre executar o servidor de forma automatica
  yarn add nodemon -D

  depois adicionar no package.json o script: 
   "scripts": {
      "dev": "nodemon index.js"
   }, 

  * sucrase: serve para o node entender as novas funcionalidades do JS.
    deve ser criado um arquivo chamado: nodemon.json e adicionar:
      {
        "execMap": {
            "js": "node -r sucrase/register"
        }
      }
    no package.json nos scripts adicionar: 
      "dev:debug": "nodemon --inspect src/server.js"

    para se executar o debug ao clicar no icone de debugg do vs code, ir nas configurações 
    e trocar o valor da variavel "request" para "attach". Remover a variavel "program" e adicionar
    a variavel "protocol" com o valor "inspector";  e para sempre executar o debug quando atualizar 
    o codigo fonte so adicionar a variavel "restart" com o valor "true";

  * sequelize: é o ORM de banco de dados
     yarn add sequelize

  * sequelize-cli: é interface de linha de comando
     yarn add sequelize-cli -D
  
  * pg e pg-hstore: quando utilizar o sequelize do postgres deve ser adicionado essas DEPENDENCIAS
    yarn add pg pg-hstore

  * bcryptjs: responsavel por realizar criptografia 
    yarn add bcryptjs

  * jsonwebtoken: responsavel pelo jwt
    yarn add jsonwebtoken

  * yup: biblioteca para realizar validações
    yarn add yup

  * date-fns: biblioteca para se trabalhar com datas.

//INSTALA TODAS AS DEPENDENCIAS DO PROJETO  
  yarn

//EXECUTAR SERVIDOR NODE
  yarn dev

//INSTALAR POSTGRESS VIA DOCKER POR TERMINHAL:
docker run --name database -e POSTGRES_PASSWORD=docker -p 5432:5432 -d postgres

*********************************
PARA CONFIGURAR PADRÕES DE CÓDIGO NO PROJETO

1º Instalar a dependencia "eslint", isso vai verificar se o código esta seguindo o padrão estabelecido
  yarn add eslint -D

2º rodar o comando abaixo para iniciar o arquivo de configuração
  yarn eslint --init

3º Instalar a dependencia 
  yarn add prettier eslint-config-prettier eslint-plugin-prettier -D

*************************
COMANDOS DO SEQUELIZE-CLI

//CRIAR MIGRATIONS
  yarn sequelize migration:create --name=create-users

//RODAR AS MIGRATIONS:
  yarn sequelize db:migrate

//REMOVER MIGRATIONS ANTERIOR
  yarn sequelize db:migrate:undo

//REMOVER TODAS MIGRATIONS
  yarn sequelize db:migrate:undo:all

*********************
ENVIO DE EMAILS

  * nodemailer: biblioteca para envio de emails
    yarn add nodemailer 

  * express-handlebars: biblioteca para template de emails
    yarn add express-handlebars
  
  * nodemailer-express-handlebars: integração do nodemailer com o handlebars
    yarn add nodemailer-express-handlebars

*********************
REDIS BANCO NÃO RELACIONAL
  somente salva chave e valor é mais performatico que o mongo

  //INSTALAR VIA TERMINAL:
    docker run --name redisbarber -p 6379:6379 -d -t redis:alpine

  //bee-queue: biblioteca para gerenciamento de filas

*********************
TRATAMENTO DE EXCEÇÕES
   usado para tratar os erros quando estiver em produções, sentry é uma das ferramentas utilizadas

   //criar conta no sentry

   //express-async-errors: tem erro que nao identifica o asncy
      yarn add express-async-errors

   //youch: faz a tratativa das mensagem de erro para o desenvolvedor
      yarn add youch

